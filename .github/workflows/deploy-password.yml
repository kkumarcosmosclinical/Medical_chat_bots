name: Deploy Medical Chatbot (Password Auth)

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies for testing
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run syntax checks
        run: |
          python -m py_compile main.py
          python -m py_compile app.py
          python -m py_compile config.py
          echo "‚úì All Python files are valid"
      
      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass
      
      - name: Create Backup on Server
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR || '/home/krishan/projects/Medicalchatbot' }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} "cd ${REMOTE_DIR} && mkdir -p backups && tar -czf backups/backup_\$(date +%Y%m%d_%H%M%S).tar.gz *.py chat_functions Embedding_fuctions database Excel_chat_bot 2>/dev/null || echo 'First deployment'"
      
      - name: Deploy to Server
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR || '/home/krishan/projects/Medicalchatbot' }}
        run: |
          echo "üì¶ Uploading files to server..."
          
          # Upload main Python files
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no main.py app.py config.py requirements.txt ${SERVER_USER}@${SERVER_IP}:${REMOTE_DIR}/
          
          # Upload directories
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no -r chat_functions Embedding_fuctions database Excel_chat_bot ${SERVER_USER}@${SERVER_IP}:${REMOTE_DIR}/
          
          # Upload utility scripts
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no fix_permissions.sh fix_dirs.py FIX_CHROMADB_PERMISSIONS.sh ${SERVER_USER}@${SERVER_IP}:${REMOTE_DIR}/
          
          echo "‚úì Files uploaded successfully"
      
      - name: Install Dependencies (Conda Base)
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR || '/home/krishan/projects/Medicalchatbot' }}
        run: |
          echo "üì¶ Installing dependencies in conda base environment..."
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} "cd ${REMOTE_DIR} && source ~/miniconda3/etc/profile.d/conda.sh && conda activate base && pip install -r requirements.txt"
          echo "‚úì Dependencies installed"
      
      - name: Fix Permissions
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR || '/home/krishan/projects/Medicalchatbot' }}
        run: |
          echo "üîß Fixing permissions..."
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} "cd ${REMOTE_DIR} && chmod +x *.sh && ./fix_permissions.sh && python fix_dirs.py"
          echo "‚úì Permissions fixed"
      
      - name: Restart Application
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR || '/home/krishan/projects/Medicalchatbot' }}
        run: |
          echo "üîÑ Restarting application..."
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} "cd ${REMOTE_DIR} && pkill -f 'python main.py' 2>/dev/null || echo 'No process to kill' && source ~/miniconda3/etc/profile.d/conda.sh && conda activate base && nohup python main.py > app.log 2>&1 &"
          sleep 3
          echo "‚úì Application restarted"
      
      - name: Verify Deployment
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR || '/home/krishan/projects/Medicalchatbot' }}
        run: |
          echo "üîç Verifying deployment..."
          
          # Check if process is running
          if sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} "ps aux | grep 'python main.py' | grep -v grep" > /dev/null 2>&1; then
            echo "‚úì Application is running"
          else
            echo "‚úó Application is not running!"
            sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} "tail -50 ${REMOTE_DIR}/app.log"
            exit 1
          fi
          
          # Wait for application to start
          sleep 5
          
          # Check API health
          HTTP_CODE=$(sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} "curl -f http://localhost:5001/docs -o /dev/null -s -w '%{http_code}' || echo '000'")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úì API is responding (HTTP $HTTP_CODE)"
          else
            echo "‚ö† API check returned: HTTP $HTTP_CODE"
          fi
      
      - name: Deployment Summary
        if: always()
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "========================================"
            echo "‚úÖ Deployment Successful!"
            echo "========================================"
            echo ""
            echo "üîó Application URL: http://${SERVER_IP}:5001"
            echo "üìö API Docs: http://${SERVER_IP}:5001/docs"
          else
            echo "========================================"
            echo "‚ùå Deployment Failed!"
            echo "========================================"
            exit 1
          fi

